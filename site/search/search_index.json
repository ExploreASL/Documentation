{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ExploreASL Description ExploreASL is a pipeline and toolbox for image processing and statistics of arterial spin labeling perfusion MR images. It is designed as a multi-OS , open source, collaborative framework that facilitates cross-pollination between image processing method developers and clinical investigators. The software provides a complete head-to-tail approach that runs fully automatically, encompassing all necessary tasks from data import and structural segmentation, registration and normalization, up to CBF quantification. In addition, the software package includes and quality control ( QC ) procedures and region-of-interest ( ROI ) as well as voxel-wise analysis on the extracted data. To-date, ExploreASL has been used for processing ~10000 ASL datasets from all major MRI vendors and ASL sequences, and a variety of patient populations, representing ~30 studies. The ultimate goal of ExploreASL is to combine data from multiple studies to identify disease related perfusion patterns that may prove crucial in using ASL as a diagnostic took and enhance our understanding of the interplay of perfusion and structural changes in neurodegenerative pathophysiology. Additionally, this (semi-)automatic pipeline allows us to minimize manual intervention, which increases the reproducibility of studies. Highlighted Features Features Installation To use ExploreASL within Matlab, you can download a stable release version from the GitHub releases section. Navigate within Matlab to the ExporeASL directory, to make ExploreASL the current working directory. It is recommended to use the Matlab set paths option to add the ExploreASL folder and all subfolders to the known paths. Execute the master script to start the interactive ExploreASL workflow: ExploreASL_Master Workflow Developers Please contact the co-creators for more information: Henk-Jan Mutsaerts HenkJanMutsaerts@Gmail.com Jan Petr j.petr@hzdr.de Other Contributors Acknowledgement","title":"Home"},{"location":"#exploreasl","text":"","title":"ExploreASL"},{"location":"#description","text":"ExploreASL is a pipeline and toolbox for image processing and statistics of arterial spin labeling perfusion MR images. It is designed as a multi-OS , open source, collaborative framework that facilitates cross-pollination between image processing method developers and clinical investigators. The software provides a complete head-to-tail approach that runs fully automatically, encompassing all necessary tasks from data import and structural segmentation, registration and normalization, up to CBF quantification. In addition, the software package includes and quality control ( QC ) procedures and region-of-interest ( ROI ) as well as voxel-wise analysis on the extracted data. To-date, ExploreASL has been used for processing ~10000 ASL datasets from all major MRI vendors and ASL sequences, and a variety of patient populations, representing ~30 studies. The ultimate goal of ExploreASL is to combine data from multiple studies to identify disease related perfusion patterns that may prove crucial in using ASL as a diagnostic took and enhance our understanding of the interplay of perfusion and structural changes in neurodegenerative pathophysiology. Additionally, this (semi-)automatic pipeline allows us to minimize manual intervention, which increases the reproducibility of studies.","title":"Description"},{"location":"#highlighted-features","text":"","title":"Highlighted Features"},{"location":"#features","text":"","title":"Features"},{"location":"#installation","text":"To use ExploreASL within Matlab, you can download a stable release version from the GitHub releases section. Navigate within Matlab to the ExporeASL directory, to make ExploreASL the current working directory. It is recommended to use the Matlab set paths option to add the ExploreASL folder and all subfolders to the known paths. Execute the master script to start the interactive ExploreASL workflow: ExploreASL_Master","title":"Installation"},{"location":"#workflow","text":"","title":"Workflow"},{"location":"#developers","text":"Please contact the co-creators for more information: Henk-Jan Mutsaerts HenkJanMutsaerts@Gmail.com Jan Petr j.petr@hzdr.de","title":"Developers"},{"location":"#other-contributors","text":"","title":"Other Contributors"},{"location":"#acknowledgement","text":"","title":"Acknowledgement"},{"location":"ASL_Module/","text":"Submodules of the ASL Module Create Analysis Mask Function function xASL_wrp_CreateAnalysisMask(x) Description Create analysis mask from a combination of FoV & removal of high and negative intravascular ASL voxels. Workflow Create FoV mask (native & MNI spaces) Detect negative vascular signal (native & MNI spaces, within pGM >0.5) Detect peak vascular signal (native & MNI spaces, within pGM ==80% percentile on ASL image) Brainmasking & FoV -masking (A) native & B) MNI spaces): Add WM vascular parts back to the mask (defined as pWM>0.8) & remove extracranial signal. In the WM , negative or peak signal is more expected from noise rather than from intra-vascular signal, not many big vessels exist in the WM . Save vascular masks Create susceptibility mask (standard space only): Here, we combine manually segmented susceptibility artifact regions in which a population-based susceptibility probability map is created. This map is combined (i.e. taking the product) with the mean control & PWI intensity distribution in these regions. This product is thresholded with the average of the 75th percentile & 15% of the intensity (for a bit more robustness against individual variability in sinus sizes). Create standard space CBF_masked image to visualize masking effect Recommended usage Interface definition Prepare PV Function function x = xASL_wrp_PreparePV(x, bStandardSpace) Description Submodule of ExploreASL ASL Module, to prepare PV maps on ASL resolution. Workflow This submodule prepares partial volume correction ( PVC ) by creating correct PV maps in ASL resolution, in native space, as well as in standard space if requested (to perform PVC in standard space). If bStandardSpace: 1. Create dummy upsampled ASL scan, for registration 2. Reslice pGM & pWM to hi-res ASL 3. Estimate effective spatial resolution of ASL 4. Smooth pGM & pWM to this spatial resolution 5. Move smoothed tissue posteriors to MNI space Else: Run step 3 only, which will use the effective spatial resolution that is default for the respective sequence: 2D EPI : [1 1 1] * VoxelSize 3D GRASE : [1.1 1.1 1.38] * VoxelSize * 3D spiral : [4.3 4.4 10.1] * VoxelSize (assuming GE uses the upsampled 2x2x4 mm & run steps 1&2, but in native space these entail presmoothing & downsampling.) Recommended usage Interface definition Process M0 Function function xASL_wrp_ProcessM0(x) Description Submodule of ExploreASL ASL Module, for M0 image processing. Workflow This submodule performs the image processing and quantification of M0 maps (if they exist), with the following steps: Register M0 to mean control if it exists: Before registration, contrast is equalized between the images & biasfields are removed. Quantify M0 (correction scale slope & incomplete T1 recovery) Masking & smoothing of M0 image, either using: A) traditional technique (very sharp masking & little smoothing) B) new ExploreASL-specific technique: extrapolating outside mask (avoiding artifacts from too much or too little masking) smooth very extensively, to create a biasfield (increases robustness & comparison of M0 between sequences/patients) Any M0 will be processed here. Even if part of the subjects does not have an M0 , since this can be later imputed, or an average population M0 image could be used. Also, without background suppression and without an M0 , the MeanControl image is before saved as M0 , and will be processed here as well. Note that any voxel-size differences between M0 and ASL are allowed here: step 0B below rescales the PD inside an M0 voxel to the same as the ASL resolution (assuming a voxel with half volume contains half the amount of protons). The M0 is further processed in standard space, and reduced to a biasfield. For the quantification in standard space, the PWI and M0 are now by definition in the same space. Also, the standard space M0 biasfield is resampled to the native PWI space (at the end of step 3B) , ensuring that both are also in the same native space. Recommended usage Interface definition Quantify Function function xASL_wrp_Quantify(x, PWI_Path, OutputPath, M0Path, SliceGradientPath) Description Submodule of ExploreASL ASL Module, that performs quantfication. Workflow This submodule converts PWIs to quantified CBF maps (or related derivatives): Load PWI Prepare M0 Hematocrit & blood T1 correction ASL & M0 parameters comparisons Load SliceGradient Initialize & define quantification parameters Define labeling efficiency Perform quantification Save files Perform FEAST quantification (if exist) Recommended usage Interface definition Realign ASL Function function xASL_wrp_RealignASL(x,bSubtraction) Description Submodule of ExploreASL ASL Module, that realigns. Workflow This submodule estimates motion by spm_realign, which uses a rigid-body registration (3 translations, 3 rotations). It runs ENABLE to reject outliers and provides a visualization. ENABLE , QC and visualizations are based on the Net Displacement Vector ( NDV ) (in mm): according to Pythagorean/Euclydian RMS . Link: jiscmail View this link for image of rotation roll, pitch and yaw: grcnasa This submodule performs the following steps: 1. Estimate motion 2. Calculate and plot position and motion parameters 3. Threshold-free spike definition (based on ENABLE , but with t-stats rather than the threshold p<0.05) 4. Remove spike frames from Nifti Recommended usage Interface definition Register ASL Function function xASL_wrp_RegisterASL(x) Description Submodule of ExploreASL ASL Module, that registers ASL to T1w (or potentially other structural images). Workflow This submodule registers ASL images to T1w space, by using a combination of the registration techniques below. Note that in the absence of raw structural files (i.e. T1 .nii[.gz] or T1_ORI .nii[.gz], it will recreate dummy files from standard space to do this registration. M0-T1w rigid-body -> this works well in 2D EPI sequences PWI-pGM rigid-body -> this is robust across sequences with different readouts and consequently different effective spatial resolutions. With low spatial resolution (e.g. GE 3D spiral product sequence), M0-T1w registration may not work, but PWI-pGM will work. PWI-pGM registration fails with large (vascular) artifacts, therefore this is performed only with relatively low spatial CoV . PWI-pGM affine -> If the spatial CoV is sufficiently low, this can improve the registration These images are registered to ASL templates that were inversely transformed from MNI to the T1w space (& resampled to the ASL space) As this would have an ever higher similarity with the M0 & PWI . This submodule performs the following steps: Administration: ASL4D is dealth with, if motion peaks were removed this is called despiked_ASL4D a default \"OtherList\" is specified. This is used every registration instance, except for removing the ref and src NIfTIs used in the registration instance. Also, inside the registration function the unexisting OtherList NIfTIs are skipped Define paths to the ASL templates Previous registration output files are removed Allow registration without structural data native -> MNI transformation flow field y_T1.nii is smoothed to the effective ASL resolution y_ASL.nii Registration contrasts are dealth with: x.bRegistrationContrast - specifies the image contrast used for registration (OPTIONAL, DEFAULT = 2): 0 = Control -> T1w 1 = CBF -> pseudoCBF from template/ pGM + pWM (skip if sCoV >0.667) 2 = automatic (mix of both) 3 = option 2 & force CBF -> pseudoCBF irrespective of sCoV or Tanimoto coefficient Dummy src NIfTIs are created: mean_control.nii to register with T1w mean_PWI_Clipped.nii to register with pseudoCBF Create reference images, downsampled pseudoTissue Registration Center of Mass Registration ASL -> anat (Control -> T1w ) (this step is only applied if it improves the Tanimoto coefficient) Registration CBF->pseudoCBF (this step is only applied if it improves the Tanimoto coefficient). Also, this step is only applied if the spatial CoV < 0.67. Note that this is usually the case for 3D scans because of their lower effective spatial resolution. x.bAffineRegistration - specifies the ASL-T1w rigid-body registration is followed up by an affine registration (OPTIONAL, DEFAULT = 2) 0 = affine registration disabled 1 = affine registration enabled 2 = affine registration automatically chosen based on spatial CoV of PWI Recommended usage Interface definition Resample ASL Function function xASL_wrp_ResampleASL(x) Description Submodule of ExploreASL ASL Module, that reslices native space images to standard space. Workflow This submodule resamples native space NIfTIs to standard space, using the deformation fields computed in the structural module after smoothing these transformation fields to the ASL resolution. The applied interpolation is a combination of all transformations (e.g. motion correction, registration to T1w , and transformation of T1w to standard space. This submodule performs the following steps: Create slice gradient image for quantification reference, in case of 2D ASL Reslice ASL time series to MNI space (currently 1.5 mm^3) Create mean control image, if available: This also applies a bilateral filter, if requested. If x.M0 is set as UseControlAsM0, this mean control NIfTI will be copied to an M0 NIfTI (and processed in the M0 submodule). Perform pair-wise subtraction (to create PWI.nii ), in native space Same in standard space Save PWI NIfTI & time-series-related maps ( SD, SNR ) Recommended usage Interface definition Visual QC ASL Function function xASL_wrp_VisualQC_ASL(x) Description Submodule of ExploreASL ASL Module, that performs several visualizations for QC . Workflow This submodule performs several visualizations for visual & quantitative QC . 1. After initial admin 2. It starts with making ASL NIfTIs ready for visualization & conversion to DICOM (though skipped by default) 3. Then it performs a collection of visualizations 4. Visualizes results of the TopUp geometric distortion correction 5. Visualization of slice gradient 6. Visualization & calculation of temporal QC parameters 7. Compute DICE overlap/intersection of ASL brain in FoV & T1w , to calculate coverage 8. Summarize orientation & check left-right flips 9. Collect several other parameters & store in PDF overview Recommended usage Interface definition","title":"Module ASL"},{"location":"ASL_Module/#submodules-of-the-asl-module","text":"","title":"Submodules of the ASL Module"},{"location":"ASL_Module/#create-analysis-mask","text":"","title":"Create Analysis Mask"},{"location":"ASL_Module/#function","text":"function xASL_wrp_CreateAnalysisMask(x)","title":"Function"},{"location":"ASL_Module/#description","text":"Create analysis mask from a combination of FoV & removal of high and negative intravascular ASL voxels.","title":"Description"},{"location":"ASL_Module/#workflow","text":"Create FoV mask (native & MNI spaces) Detect negative vascular signal (native & MNI spaces, within pGM >0.5) Detect peak vascular signal (native & MNI spaces, within pGM ==80% percentile on ASL image) Brainmasking & FoV -masking (A) native & B) MNI spaces): Add WM vascular parts back to the mask (defined as pWM>0.8) & remove extracranial signal. In the WM , negative or peak signal is more expected from noise rather than from intra-vascular signal, not many big vessels exist in the WM . Save vascular masks Create susceptibility mask (standard space only): Here, we combine manually segmented susceptibility artifact regions in which a population-based susceptibility probability map is created. This map is combined (i.e. taking the product) with the mean control & PWI intensity distribution in these regions. This product is thresholded with the average of the 75th percentile & 15% of the intensity (for a bit more robustness against individual variability in sinus sizes). Create standard space CBF_masked image to visualize masking effect","title":"Workflow"},{"location":"ASL_Module/#recommended-usage","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition","text":"","title":"Interface definition"},{"location":"ASL_Module/#prepare-pv","text":"","title":"Prepare PV"},{"location":"ASL_Module/#function_1","text":"function x = xASL_wrp_PreparePV(x, bStandardSpace)","title":"Function"},{"location":"ASL_Module/#description_1","text":"Submodule of ExploreASL ASL Module, to prepare PV maps on ASL resolution.","title":"Description"},{"location":"ASL_Module/#workflow_1","text":"This submodule prepares partial volume correction ( PVC ) by creating correct PV maps in ASL resolution, in native space, as well as in standard space if requested (to perform PVC in standard space). If bStandardSpace: 1. Create dummy upsampled ASL scan, for registration 2. Reslice pGM & pWM to hi-res ASL 3. Estimate effective spatial resolution of ASL 4. Smooth pGM & pWM to this spatial resolution 5. Move smoothed tissue posteriors to MNI space Else: Run step 3 only, which will use the effective spatial resolution that is default for the respective sequence: 2D EPI : [1 1 1] * VoxelSize 3D GRASE : [1.1 1.1 1.38] * VoxelSize * 3D spiral : [4.3 4.4 10.1] * VoxelSize (assuming GE uses the upsampled 2x2x4 mm & run steps 1&2, but in native space these entail presmoothing & downsampling.)","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_1","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_1","text":"","title":"Interface definition"},{"location":"ASL_Module/#process-m0","text":"","title":"Process M0"},{"location":"ASL_Module/#function_2","text":"function xASL_wrp_ProcessM0(x)","title":"Function"},{"location":"ASL_Module/#description_2","text":"Submodule of ExploreASL ASL Module, for M0 image processing.","title":"Description"},{"location":"ASL_Module/#workflow_2","text":"This submodule performs the image processing and quantification of M0 maps (if they exist), with the following steps: Register M0 to mean control if it exists: Before registration, contrast is equalized between the images & biasfields are removed. Quantify M0 (correction scale slope & incomplete T1 recovery) Masking & smoothing of M0 image, either using: A) traditional technique (very sharp masking & little smoothing) B) new ExploreASL-specific technique: extrapolating outside mask (avoiding artifacts from too much or too little masking) smooth very extensively, to create a biasfield (increases robustness & comparison of M0 between sequences/patients) Any M0 will be processed here. Even if part of the subjects does not have an M0 , since this can be later imputed, or an average population M0 image could be used. Also, without background suppression and without an M0 , the MeanControl image is before saved as M0 , and will be processed here as well. Note that any voxel-size differences between M0 and ASL are allowed here: step 0B below rescales the PD inside an M0 voxel to the same as the ASL resolution (assuming a voxel with half volume contains half the amount of protons). The M0 is further processed in standard space, and reduced to a biasfield. For the quantification in standard space, the PWI and M0 are now by definition in the same space. Also, the standard space M0 biasfield is resampled to the native PWI space (at the end of step 3B) , ensuring that both are also in the same native space.","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_2","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_2","text":"","title":"Interface definition"},{"location":"ASL_Module/#quantify","text":"","title":"Quantify"},{"location":"ASL_Module/#function_3","text":"function xASL_wrp_Quantify(x, PWI_Path, OutputPath, M0Path, SliceGradientPath)","title":"Function"},{"location":"ASL_Module/#description_3","text":"Submodule of ExploreASL ASL Module, that performs quantfication.","title":"Description"},{"location":"ASL_Module/#workflow_3","text":"This submodule converts PWIs to quantified CBF maps (or related derivatives): Load PWI Prepare M0 Hematocrit & blood T1 correction ASL & M0 parameters comparisons Load SliceGradient Initialize & define quantification parameters Define labeling efficiency Perform quantification Save files Perform FEAST quantification (if exist)","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_3","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_3","text":"","title":"Interface definition"},{"location":"ASL_Module/#realign-asl","text":"","title":"Realign ASL"},{"location":"ASL_Module/#function_4","text":"function xASL_wrp_RealignASL(x,bSubtraction)","title":"Function"},{"location":"ASL_Module/#description_4","text":"Submodule of ExploreASL ASL Module, that realigns.","title":"Description"},{"location":"ASL_Module/#workflow_4","text":"This submodule estimates motion by spm_realign, which uses a rigid-body registration (3 translations, 3 rotations). It runs ENABLE to reject outliers and provides a visualization. ENABLE , QC and visualizations are based on the Net Displacement Vector ( NDV ) (in mm): according to Pythagorean/Euclydian RMS . Link: jiscmail View this link for image of rotation roll, pitch and yaw: grcnasa This submodule performs the following steps: 1. Estimate motion 2. Calculate and plot position and motion parameters 3. Threshold-free spike definition (based on ENABLE , but with t-stats rather than the threshold p<0.05) 4. Remove spike frames from Nifti","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_4","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_4","text":"","title":"Interface definition"},{"location":"ASL_Module/#register-asl","text":"","title":"Register ASL"},{"location":"ASL_Module/#function_5","text":"function xASL_wrp_RegisterASL(x)","title":"Function"},{"location":"ASL_Module/#description_5","text":"Submodule of ExploreASL ASL Module, that registers ASL to T1w (or potentially other structural images).","title":"Description"},{"location":"ASL_Module/#workflow_5","text":"This submodule registers ASL images to T1w space, by using a combination of the registration techniques below. Note that in the absence of raw structural files (i.e. T1 .nii[.gz] or T1_ORI .nii[.gz], it will recreate dummy files from standard space to do this registration. M0-T1w rigid-body -> this works well in 2D EPI sequences PWI-pGM rigid-body -> this is robust across sequences with different readouts and consequently different effective spatial resolutions. With low spatial resolution (e.g. GE 3D spiral product sequence), M0-T1w registration may not work, but PWI-pGM will work. PWI-pGM registration fails with large (vascular) artifacts, therefore this is performed only with relatively low spatial CoV . PWI-pGM affine -> If the spatial CoV is sufficiently low, this can improve the registration These images are registered to ASL templates that were inversely transformed from MNI to the T1w space (& resampled to the ASL space) As this would have an ever higher similarity with the M0 & PWI . This submodule performs the following steps: Administration: ASL4D is dealth with, if motion peaks were removed this is called despiked_ASL4D a default \"OtherList\" is specified. This is used every registration instance, except for removing the ref and src NIfTIs used in the registration instance. Also, inside the registration function the unexisting OtherList NIfTIs are skipped Define paths to the ASL templates Previous registration output files are removed Allow registration without structural data native -> MNI transformation flow field y_T1.nii is smoothed to the effective ASL resolution y_ASL.nii Registration contrasts are dealth with: x.bRegistrationContrast - specifies the image contrast used for registration (OPTIONAL, DEFAULT = 2): 0 = Control -> T1w 1 = CBF -> pseudoCBF from template/ pGM + pWM (skip if sCoV >0.667) 2 = automatic (mix of both) 3 = option 2 & force CBF -> pseudoCBF irrespective of sCoV or Tanimoto coefficient Dummy src NIfTIs are created: mean_control.nii to register with T1w mean_PWI_Clipped.nii to register with pseudoCBF Create reference images, downsampled pseudoTissue Registration Center of Mass Registration ASL -> anat (Control -> T1w ) (this step is only applied if it improves the Tanimoto coefficient) Registration CBF->pseudoCBF (this step is only applied if it improves the Tanimoto coefficient). Also, this step is only applied if the spatial CoV < 0.67. Note that this is usually the case for 3D scans because of their lower effective spatial resolution. x.bAffineRegistration - specifies the ASL-T1w rigid-body registration is followed up by an affine registration (OPTIONAL, DEFAULT = 2) 0 = affine registration disabled 1 = affine registration enabled 2 = affine registration automatically chosen based on spatial CoV of PWI","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_5","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_5","text":"","title":"Interface definition"},{"location":"ASL_Module/#resample-asl","text":"","title":"Resample ASL"},{"location":"ASL_Module/#function_6","text":"function xASL_wrp_ResampleASL(x)","title":"Function"},{"location":"ASL_Module/#description_6","text":"Submodule of ExploreASL ASL Module, that reslices native space images to standard space.","title":"Description"},{"location":"ASL_Module/#workflow_6","text":"This submodule resamples native space NIfTIs to standard space, using the deformation fields computed in the structural module after smoothing these transformation fields to the ASL resolution. The applied interpolation is a combination of all transformations (e.g. motion correction, registration to T1w , and transformation of T1w to standard space. This submodule performs the following steps: Create slice gradient image for quantification reference, in case of 2D ASL Reslice ASL time series to MNI space (currently 1.5 mm^3) Create mean control image, if available: This also applies a bilateral filter, if requested. If x.M0 is set as UseControlAsM0, this mean control NIfTI will be copied to an M0 NIfTI (and processed in the M0 submodule). Perform pair-wise subtraction (to create PWI.nii ), in native space Same in standard space Save PWI NIfTI & time-series-related maps ( SD, SNR )","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_6","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_6","text":"","title":"Interface definition"},{"location":"ASL_Module/#visual-qc-asl","text":"","title":"Visual QC ASL"},{"location":"ASL_Module/#function_7","text":"function xASL_wrp_VisualQC_ASL(x)","title":"Function"},{"location":"ASL_Module/#description_7","text":"Submodule of ExploreASL ASL Module, that performs several visualizations for QC .","title":"Description"},{"location":"ASL_Module/#workflow_7","text":"This submodule performs several visualizations for visual & quantitative QC . 1. After initial admin 2. It starts with making ASL NIfTIs ready for visualization & conversion to DICOM (though skipped by default) 3. Then it performs a collection of visualizations 4. Visualizes results of the TopUp geometric distortion correction 5. Visualization of slice gradient 6. Visualization & calculation of temporal QC parameters 7. Compute DICE overlap/intersection of ASL brain in FoV & T1w , to calculate coverage 8. Summarize orientation & check left-right flips 9. Collect several other parameters & store in PDF overview","title":"Workflow"},{"location":"ASL_Module/#recommended-usage_7","text":"","title":"Recommended usage"},{"location":"ASL_Module/#interface-definition_7","text":"","title":"Interface definition"},{"location":"About/","text":"About Test","title":"About"},{"location":"About/#about","text":"","title":"About"},{"location":"About/#test","text":"","title":"Test"},{"location":"Import_Module/","text":"ExploreASL uses an import workflow based on ...","title":"Module Import"},{"location":"License/","text":"The ExploreASL Software is distributed under the license described below, designed to encourage collabortion while at the same time aiming to reuse commercial profit for academical purpose (e.g. hire an ExploreASL developer). All contents, except for those in the folder //External, are proprietary of ExploreASL. The content in the folder //External is not subject to this license. Provisionary license ExploreASL. This license will be renewed soon after legal checks. ExploreASL, Release 0.999 (c) 2020, Amsterdam University Medical Center (the \"Software\"). The Software remains the property of Amsterdam University Medical Center (AUMC, \"the University\"). The Software is distributed \"AS IS\" under this License solely for non-commercial use in the hope that it will be useful, but in order that the University as a charitable foundation protects its assets for the benefit of its educational and research purposes, the University makes clear that no condition is made or to be implied, nor is any warranty given or to be implied, as to the accuracy of the Software, or that it will be suitable for any particular purpose or for use under any specific conditions. Furthermore, the University disclaims all responsibility for the use which is made of the Software. It further disclaims any liability for the outcomes arising from using the Software. The Licensee agrees to indemnify the University and hold the University harmless from and against any and all claims, damages and liabilities asserted by third parties (including claims for negligence) which arise directly or indirectly from the use of the Software or the sale of any products based on the Software. No part of the Software may be reproduced, modified, transmitted or transferred in any form or by any means, electronic or mechanical, without the express permission of the University. The permission of the University is not required if the said reproduction, modification, transmission or transference is done without financial return, the conditions of this License are imposed upon the receiver of the product, and all original and amended source code is included in any transmitted product. You may be held legally responsible for any copyright infringement that is caused or encouraged by your failure to abide by these terms and conditions. You are not permitted under this License to use this Software commercially. Use for which any financial return is received shall be defined as commercial use, and includes (1) integration of all or part of the source code or the Software into a product for sale or license by or on behalf of Licensee to third parties or (2) use of the Software or any derivative of it for research with the final aim of developing software products for sale or license to a third party or (3) use of the Software or any derivative of it for research with the final aim of developing non-software products for sale or license to a third party, or (4) use of the Software to provide any service to an external organization for which payment is received. If you are interested in collaborating or contributing to this Software, please contact Henk Mutsaerts (h.j.mutsaerts@amsterdamumc.nl). If you are interested in using this Software commercially, please contact Innovation Exchange Amsterdam (\"IXA\"), the technology transfer company of the University, to negotiate a license.","title":"License"},{"location":"Modules/","text":"Modules 1. Module Import Functions function ExploreASL_Import(imPar, bCopySingleDicoms, bUseDCMTK, bCheckPermissions, bRunDCM2NII, bClone2Source, x) Description ... function imPar = ExploreASL_ImportConfig(StudyRoot) Description ... function [x] = ExploreASL_Initialize(DataParPath, ProcessData, iWorker, nWorkers) Description ... 2. Module Structural Function function [result, x] = xASL_module_Structural(x) Description This first ExploreASL module processes the structural images, i.e. high-resolution T1w and FLAIR (if present), on an individual (i.e. subject-to-subject) basis. If a FLAIR is present, this is processed first to obtain a WMH mask to fill the hypointense lesions on the T1w , before segmenting the T1w . For the T1w segmentation this module uses CAT12 by default but if this fails it falls back to SPM after trying to optimize the image contrast. Workflow LinearReg_T1w2MNI : Ensure the alignment of subjects' anterior commissure (AC) with the AC in MNI & apply this to all images LinearReg_FLAIR2T1w : Align the FLAIR (if present) with T1w FLAIR_BiasfieldCorrection : Perform a biasfield correction (if not performed by LST in following steps) LST_Segment_FLAIR_WMH : Segment WMH lesions on FLAIR (if present) LST_T1w_LesionFilling_WMH : Use WMH segmentation to fill lesions on T1w Segment_T1w : Tissue segmentation on T1w CleanUpWMH_SEGM : Extra WMH cleanup of some over- and under-segmentation Resample2StandardSpace : Clone all images to standard space GetVolumetrics : Obtain whole-brain volumes of GM, WM, CSF, WMH VisualQC : Obtain QC parameters & save QC Figures DoWADQCDC : QC for WAD-QC DICOM server (optional) Recommended usage % Initialize dataset DataParPath = \"ExamplePath\"; ProcessData = true; iWorker = 1; nWorkers = 1; x = ExploreASL_Initialize(DataParPath, ProcessData, iWorker, nWorkers); % Run the structural module [~, x] = xASL_Iteration(x,'xASL_module_Structural'); Interface definition Input: x structure Required input fields of the x structure: ... Output Added output fields of the x structure: ... Generated files: ... 3. Module ASL Function function [result, x] = xASL_module_ASL(x) Description This ExploreASL module processes the ASL images, i.e. ASL4D, M0, etc (if present), on an individual (i.e. session-to-session, where session indicates BIDS \"run\") basis. Both 2D and 3D options are automatially chosen, as well as processing of time-series (if available), such as motion correction and outlier exclusion. Workflow TopUpASL : FSL TopUp geometric distortion correction (if M0 images with reversed phase-encoding are present) RealignASL : If time-series are present, motion correction and outlier exclusion (ENABLE) RegisterASL : Registration of ASL to T1w anatomical images (if lacking, to MNI images) ResliceASL : Resample ASL images to standard space PreparePV : Create partial volume images in ASL space with ASL resolution ProcessM0 : M0 image processing Quantification : CBF quantification CreateAnalysisMask : Create mask using FoV, vascular outliers & susceptibility atlas VisualQC_ASL : Generate QC parameters & images WADQC : QC for WAD-QC DICOM server (OPTIONAL) Recommended usage [~, x] = xASL_Iteration(x,'xASL_module_ASL'); Interface definition Input: x structure Required input fields of the x structure: ... Output Added output fields of the x structure: ... Generated files: ... 4. Module Population Function function [result, x] = xASL_module_Population(x) Description This ExploreASL module processes all available images on the group level. It assumes that all images were adequately processed in the previous modules. Workflow CreatePopulationTemplates : Create population average images, to compare scanners, cohorts etc without physiological variance CreateAnalysisMask : Generate a group-level mask by combining individuals masks, for ROI-based analysis & VBA CreateBiasfield : When there are multiple scanners, create scanner-specific biasfields (uses Site.mat for this) GetDICOMStatistics : Create TSV file with overview of DICOM parameters GetVolumeStatistics : Create TSV file with overview of volumetric parameters GetMotionStatistics : Create TSV file with overview of motion parameters GetROIstatistics : Create TSV file with overview of regional values (e.g. qCBF, mean control, pGM etc) SortBySpatialCoV : Sort ASL_Check QC images by their spatial CoV in quality bins DeleteAndZip : Delete temporary files and gzip all NIfTIs Recommended usage [~, x] = xASL_Iteration(x,'xASL_module_Population'); Interface definition Input: x structure Required input fields of the x structure: ... Output Added output fields of the x structure: ... Generated files: ...","title":"Modules"},{"location":"Modules/#modules","text":"","title":"Modules"},{"location":"Modules/#1-module-import","text":"","title":"1. Module Import"},{"location":"Modules/#functions","text":"function ExploreASL_Import(imPar, bCopySingleDicoms, bUseDCMTK, bCheckPermissions, bRunDCM2NII, bClone2Source, x)","title":"Functions"},{"location":"Modules/#description","text":"... function imPar = ExploreASL_ImportConfig(StudyRoot)","title":"Description"},{"location":"Modules/#description_1","text":"... function [x] = ExploreASL_Initialize(DataParPath, ProcessData, iWorker, nWorkers)","title":"Description"},{"location":"Modules/#description_2","text":"...","title":"Description"},{"location":"Modules/#2-module-structural","text":"","title":"2. Module Structural"},{"location":"Modules/#function","text":"function [result, x] = xASL_module_Structural(x)","title":"Function"},{"location":"Modules/#description_3","text":"This first ExploreASL module processes the structural images, i.e. high-resolution T1w and FLAIR (if present), on an individual (i.e. subject-to-subject) basis. If a FLAIR is present, this is processed first to obtain a WMH mask to fill the hypointense lesions on the T1w , before segmenting the T1w . For the T1w segmentation this module uses CAT12 by default but if this fails it falls back to SPM after trying to optimize the image contrast.","title":"Description"},{"location":"Modules/#workflow","text":"LinearReg_T1w2MNI : Ensure the alignment of subjects' anterior commissure (AC) with the AC in MNI & apply this to all images LinearReg_FLAIR2T1w : Align the FLAIR (if present) with T1w FLAIR_BiasfieldCorrection : Perform a biasfield correction (if not performed by LST in following steps) LST_Segment_FLAIR_WMH : Segment WMH lesions on FLAIR (if present) LST_T1w_LesionFilling_WMH : Use WMH segmentation to fill lesions on T1w Segment_T1w : Tissue segmentation on T1w CleanUpWMH_SEGM : Extra WMH cleanup of some over- and under-segmentation Resample2StandardSpace : Clone all images to standard space GetVolumetrics : Obtain whole-brain volumes of GM, WM, CSF, WMH VisualQC : Obtain QC parameters & save QC Figures DoWADQCDC : QC for WAD-QC DICOM server (optional)","title":"Workflow"},{"location":"Modules/#recommended-usage","text":"% Initialize dataset DataParPath = \"ExamplePath\"; ProcessData = true; iWorker = 1; nWorkers = 1; x = ExploreASL_Initialize(DataParPath, ProcessData, iWorker, nWorkers); % Run the structural module [~, x] = xASL_Iteration(x,'xASL_module_Structural');","title":"Recommended usage"},{"location":"Modules/#interface-definition","text":"","title":"Interface definition"},{"location":"Modules/#input-x-structure","text":"Required input fields of the x structure: ...","title":"Input: x structure"},{"location":"Modules/#output","text":"Added output fields of the x structure: ... Generated files: ...","title":"Output"},{"location":"Modules/#3-module-asl","text":"","title":"3. Module ASL"},{"location":"Modules/#function_1","text":"function [result, x] = xASL_module_ASL(x)","title":"Function"},{"location":"Modules/#description_4","text":"This ExploreASL module processes the ASL images, i.e. ASL4D, M0, etc (if present), on an individual (i.e. session-to-session, where session indicates BIDS \"run\") basis. Both 2D and 3D options are automatially chosen, as well as processing of time-series (if available), such as motion correction and outlier exclusion.","title":"Description"},{"location":"Modules/#workflow_1","text":"TopUpASL : FSL TopUp geometric distortion correction (if M0 images with reversed phase-encoding are present) RealignASL : If time-series are present, motion correction and outlier exclusion (ENABLE) RegisterASL : Registration of ASL to T1w anatomical images (if lacking, to MNI images) ResliceASL : Resample ASL images to standard space PreparePV : Create partial volume images in ASL space with ASL resolution ProcessM0 : M0 image processing Quantification : CBF quantification CreateAnalysisMask : Create mask using FoV, vascular outliers & susceptibility atlas VisualQC_ASL : Generate QC parameters & images WADQC : QC for WAD-QC DICOM server (OPTIONAL)","title":"Workflow"},{"location":"Modules/#recommended-usage_1","text":"[~, x] = xASL_Iteration(x,'xASL_module_ASL');","title":"Recommended usage"},{"location":"Modules/#interface-definition_1","text":"","title":"Interface definition"},{"location":"Modules/#input-x-structure_1","text":"Required input fields of the x structure: ...","title":"Input: x structure"},{"location":"Modules/#output_1","text":"Added output fields of the x structure: ... Generated files: ...","title":"Output"},{"location":"Modules/#4-module-population","text":"","title":"4. Module Population"},{"location":"Modules/#function_2","text":"function [result, x] = xASL_module_Population(x)","title":"Function"},{"location":"Modules/#description_5","text":"This ExploreASL module processes all available images on the group level. It assumes that all images were adequately processed in the previous modules.","title":"Description"},{"location":"Modules/#workflow_2","text":"CreatePopulationTemplates : Create population average images, to compare scanners, cohorts etc without physiological variance CreateAnalysisMask : Generate a group-level mask by combining individuals masks, for ROI-based analysis & VBA CreateBiasfield : When there are multiple scanners, create scanner-specific biasfields (uses Site.mat for this) GetDICOMStatistics : Create TSV file with overview of DICOM parameters GetVolumeStatistics : Create TSV file with overview of volumetric parameters GetMotionStatistics : Create TSV file with overview of motion parameters GetROIstatistics : Create TSV file with overview of regional values (e.g. qCBF, mean control, pGM etc) SortBySpatialCoV : Sort ASL_Check QC images by their spatial CoV in quality bins DeleteAndZip : Delete temporary files and gzip all NIfTIs","title":"Workflow"},{"location":"Modules/#recommended-usage_2","text":"[~, x] = xASL_Iteration(x,'xASL_module_Population');","title":"Recommended usage"},{"location":"Modules/#interface-definition_2","text":"","title":"Interface definition"},{"location":"Modules/#input-x-structure_2","text":"Required input fields of the x structure: ...","title":"Input: x structure"},{"location":"Modules/#output_2","text":"Added output fields of the x structure: ... Generated files: ...","title":"Output"},{"location":"Population_Module/","text":"Submodules of the Population Module Delete Many Temp Files Function function xASL_adm_DeleteManyTempFiles(x) Description This function removes as many files as possible. Workflow Recommended usage Interface definition Gzip All Files Function function xASL_adm_GzipAllFiles(ROOT, bFolder, bUseLinux) Description This function zips all .nii files recursively into nii.gz. Note that the linux option cannot deal with spaces in filenames or directories. Workflow Recommended usage Interface definition Create Analysis Mask Function function [x] = xASL_im_CreateAnalysisMask(x, Threshold) Description Creates population analysis mask. Workflow This function takes the mean population-based probability maps of masks, thresholds and combines them: 1. Creation GM, WM & WholeBrain masks by p>0.5 2. Create, combine & save vascular, susceptibity & FoV masks: * MaskVascular * MaskSusceptibility = MaskSusceptibility & MaskFoV 3. Create & save VBA mask * MaskAnalysis = MaskVascular & MaskSusceptibility * x.S.VBAmask = MaskAnalysis & GMmask 4. Visualization: Creates a figure with columns being following maps/masks overlaid over mean population T1w: * FoV probability 0-50% missing voxels * Vascular 0-7.5% missing voxels * Susceptibility 0-50% missing voxels * Analysis mask Recommended usage Interface definition Sort By Spatial CoV Function function xASL_qc_SortBySpatialCoV(x, Threshold1, Threshold2) Description Compute statistics for each ROI. Workflow This function organizes the ASL QC images in //analysis/Population/ASLCheck into CBF, vascular and artifactual contrast per the spatial CoV thresholds defined above, in folders: //analysis/Population/ASLCheck/1_CBFContrast //analysis/Population/ASLCheck/2_VascularContrast //analysis/Population/ASLCheck/3_ArtifactualContrast Invalid spatial CoV numbers (e.g. NaN) will go to: //analysis/Population/ASLCheck/4_Unknown_sCoV Note: these outputs need to be visually checked; but pre-sorting them by spatial CoV puts them already in categories that are quick to skim through and manually correct by moving the images The idea is then that only category 1 images are used for perfusion (CBF) analyses, both categories 1 & 2 for the vascular (sCoV) analyses, and the category 3 images excluded from analysis. PM : this code does not include multiple sessions per subject yet! NB : this code uses the //analysis/Population/Stats/CoV_qCBF TotalGM .csv file, make sure that this file isn't edited! Recommended usage Interface definition Compute Ws CV Function function x = xASL_stat_ComputeWsCV(x) Description Calculates the within and between-subject coefficient of variance (wsCV and bsCV respectively), to estimate the power to detect effects. This requires 4D images that have been split. Workflow Recommended usage Interface definition Get Acquisition Time Function function x = xASL_stat_GetAcquisitionTime(x) Description Summarize the acquisition time of scans. Workflow This functions collects the DICOM field AcquisitionTime from each json sidecar (& parms.mat for backward compatibility) and saves them in the participants.tsv. Additionally, it creates a AcquisitionTime histogram of the full study, which can be useful to check time of scanning -> can influence physiological CBF variability. Collect times Save times Create time histogram Recommended usage Interface definition Get DICOM Statistics Function function xASL_stat_GetDICOMStatistics(x, ScanType, HasSessions, bOverwrite) Description Collect DICOM metadata in CSV file to check. Workflow This functions prints DICOM metadata (e.g. parameters used for quantification) and collects them in a single tsv (per BIDS). Summarizes this for the total population. Can be useful to detect software upgrades, where only slight parameter changes can hint on quantification changes. This function carries out the following steps: Load & save individual parameter files Print summary Write TSV file Recommended usage Interface definition Get Motion Statistics Function function xASL_stat_GetMotionStatistics(x) Description Summarize motion values. Workflow This functions collects motion stats, with the following steps: Collect motion data If no data, skip this function Print motion vs exclusion overview Add motion data to participants.tsv Recommended usage Interface definition Get Volume Statistics Function function xASL_stat_GetVolumeStatistics(x) Description Summarize volume values. Workflow This functions collects motion stats, with the following steps: Collect structural volume data Collect WMH data Add stats in participants.tsv Recommended usage Interface definition Create Biasfield Function function xASL_wrp_CreateBiasfield(x) Description Create sequence-specific intensity biasfields. Workflow This function creates a smooth biasfield as intensity map to normalize intensities between different sequences/scanner/sites within a single study. This is a simple pragmatic approach and is not validated, but is the best we can do. First acquires average additive & multiplicative factors for total GM, then does a smooth voxel-wise rescaling. This doesn't make an assumption whether site or sequence differences are additive or multiplicative, but rather fits them both. Global scaling it performed to GM CBF == 60 mL/100g/min NB : make sure that sequence resolution differences have been taken in account before creating these biasfields. PM : add normalization of between-subjects SD as well. PM : are there other things we can normalize? Recommended usage Interface definition Create Population Templates Function function xASL_wrp_CreatePopulationTemplates(x, SaveUnmasked, bCompute4Sets, SpecificScantype, bSkipMissingScans, bRemoveOutliers, FunctionsAre) Description ExploreASL Population module wrapper, creates population parametric images for each ScanType. Workflow This function creates simple parametric images, a.k.a. templates, for different image/scan types, on population level, as well as for different sets (e.g. sites/scanners/cohorts, etc) if specified. By default these images are masked, and transformed into a single column, for quick computations with low memory usage. The default parametric images that are created are the mean, between-subject SD, and the maximal intensity projection (MIP). The latter can e.g. identify intra-vascular signal that is similar between different subjects. Other parametric maps can be decommented (now commented out for speed). Recommended usage Interface definition Get ROI statistics Function function xASL_wrp_GetROIstatistics(x) Description Compute statistics for each ROI. Workflow This wrapper organizes the computation of statistics for different ROIs in a [1.5 1.5 1.5] mm MNI space: Load the atlas: xASL_stat_AtlasForStats Organize TSV output name: using x.S.output_ID Obtain the ROI statistics: xASL_stat_GetROIstatistics Print statistics in TSV files: xASL_stat_PrintStats Recommended usage Interface definition Load 4D Mem Mapping Lesions ROIs Function function [x] = xASL_wrp_Load4DMemMapping_LesionsROIs(x) Description Part of ExploreASL analysis module. Loads data & maps it to memory mapping file on disc, if not done before. Workflow Recommended usage Interface definition","title":"Module Population"},{"location":"Population_Module/#submodules-of-the-population-module","text":"","title":"Submodules of the Population Module"},{"location":"Population_Module/#delete-many-temp-files","text":"","title":"Delete Many Temp Files"},{"location":"Population_Module/#function","text":"function xASL_adm_DeleteManyTempFiles(x)","title":"Function"},{"location":"Population_Module/#description","text":"This function removes as many files as possible.","title":"Description"},{"location":"Population_Module/#workflow","text":"","title":"Workflow"},{"location":"Population_Module/#recommended-usage","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition","text":"","title":"Interface definition"},{"location":"Population_Module/#gzip-all-files","text":"","title":"Gzip All Files"},{"location":"Population_Module/#function_1","text":"function xASL_adm_GzipAllFiles(ROOT, bFolder, bUseLinux)","title":"Function"},{"location":"Population_Module/#description_1","text":"This function zips all .nii files recursively into nii.gz. Note that the linux option cannot deal with spaces in filenames or directories.","title":"Description"},{"location":"Population_Module/#workflow_1","text":"","title":"Workflow"},{"location":"Population_Module/#recommended-usage_1","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_1","text":"","title":"Interface definition"},{"location":"Population_Module/#create-analysis-mask","text":"","title":"Create Analysis Mask"},{"location":"Population_Module/#function_2","text":"function [x] = xASL_im_CreateAnalysisMask(x, Threshold)","title":"Function"},{"location":"Population_Module/#description_2","text":"Creates population analysis mask.","title":"Description"},{"location":"Population_Module/#workflow_2","text":"This function takes the mean population-based probability maps of masks, thresholds and combines them: 1. Creation GM, WM & WholeBrain masks by p>0.5 2. Create, combine & save vascular, susceptibity & FoV masks: * MaskVascular * MaskSusceptibility = MaskSusceptibility & MaskFoV 3. Create & save VBA mask * MaskAnalysis = MaskVascular & MaskSusceptibility * x.S.VBAmask = MaskAnalysis & GMmask 4. Visualization: Creates a figure with columns being following maps/masks overlaid over mean population T1w: * FoV probability 0-50% missing voxels * Vascular 0-7.5% missing voxels * Susceptibility 0-50% missing voxels * Analysis mask","title":"Workflow"},{"location":"Population_Module/#recommended-usage_2","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_2","text":"","title":"Interface definition"},{"location":"Population_Module/#sort-by-spatial-cov","text":"","title":"Sort By Spatial CoV"},{"location":"Population_Module/#function_3","text":"function xASL_qc_SortBySpatialCoV(x, Threshold1, Threshold2)","title":"Function"},{"location":"Population_Module/#description_3","text":"Compute statistics for each ROI.","title":"Description"},{"location":"Population_Module/#workflow_3","text":"This function organizes the ASL QC images in //analysis/Population/ASLCheck into CBF, vascular and artifactual contrast per the spatial CoV thresholds defined above, in folders: //analysis/Population/ASLCheck/1_CBFContrast //analysis/Population/ASLCheck/2_VascularContrast //analysis/Population/ASLCheck/3_ArtifactualContrast Invalid spatial CoV numbers (e.g. NaN) will go to: //analysis/Population/ASLCheck/4_Unknown_sCoV Note: these outputs need to be visually checked; but pre-sorting them by spatial CoV puts them already in categories that are quick to skim through and manually correct by moving the images The idea is then that only category 1 images are used for perfusion (CBF) analyses, both categories 1 & 2 for the vascular (sCoV) analyses, and the category 3 images excluded from analysis. PM : this code does not include multiple sessions per subject yet! NB : this code uses the //analysis/Population/Stats/CoV_qCBF TotalGM .csv file, make sure that this file isn't edited!","title":"Workflow"},{"location":"Population_Module/#recommended-usage_3","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_3","text":"","title":"Interface definition"},{"location":"Population_Module/#compute-ws-cv","text":"","title":"Compute Ws CV"},{"location":"Population_Module/#function_4","text":"function x = xASL_stat_ComputeWsCV(x)","title":"Function"},{"location":"Population_Module/#description_4","text":"Calculates the within and between-subject coefficient of variance (wsCV and bsCV respectively), to estimate the power to detect effects. This requires 4D images that have been split.","title":"Description"},{"location":"Population_Module/#workflow_4","text":"","title":"Workflow"},{"location":"Population_Module/#recommended-usage_4","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_4","text":"","title":"Interface definition"},{"location":"Population_Module/#get-acquisition-time","text":"","title":"Get Acquisition Time"},{"location":"Population_Module/#function_5","text":"function x = xASL_stat_GetAcquisitionTime(x)","title":"Function"},{"location":"Population_Module/#description_5","text":"Summarize the acquisition time of scans.","title":"Description"},{"location":"Population_Module/#workflow_5","text":"This functions collects the DICOM field AcquisitionTime from each json sidecar (& parms.mat for backward compatibility) and saves them in the participants.tsv. Additionally, it creates a AcquisitionTime histogram of the full study, which can be useful to check time of scanning -> can influence physiological CBF variability. Collect times Save times Create time histogram","title":"Workflow"},{"location":"Population_Module/#recommended-usage_5","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_5","text":"","title":"Interface definition"},{"location":"Population_Module/#get-dicom-statistics","text":"","title":"Get DICOM Statistics"},{"location":"Population_Module/#function_6","text":"function xASL_stat_GetDICOMStatistics(x, ScanType, HasSessions, bOverwrite)","title":"Function"},{"location":"Population_Module/#description_6","text":"Collect DICOM metadata in CSV file to check.","title":"Description"},{"location":"Population_Module/#workflow_6","text":"This functions prints DICOM metadata (e.g. parameters used for quantification) and collects them in a single tsv (per BIDS). Summarizes this for the total population. Can be useful to detect software upgrades, where only slight parameter changes can hint on quantification changes. This function carries out the following steps: Load & save individual parameter files Print summary Write TSV file","title":"Workflow"},{"location":"Population_Module/#recommended-usage_6","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_6","text":"","title":"Interface definition"},{"location":"Population_Module/#get-motion-statistics","text":"","title":"Get Motion Statistics"},{"location":"Population_Module/#function_7","text":"function xASL_stat_GetMotionStatistics(x)","title":"Function"},{"location":"Population_Module/#description_7","text":"Summarize motion values.","title":"Description"},{"location":"Population_Module/#workflow_7","text":"This functions collects motion stats, with the following steps: Collect motion data If no data, skip this function Print motion vs exclusion overview Add motion data to participants.tsv","title":"Workflow"},{"location":"Population_Module/#recommended-usage_7","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_7","text":"","title":"Interface definition"},{"location":"Population_Module/#get-volume-statistics","text":"","title":"Get Volume Statistics"},{"location":"Population_Module/#function_8","text":"function xASL_stat_GetVolumeStatistics(x)","title":"Function"},{"location":"Population_Module/#description_8","text":"Summarize volume values.","title":"Description"},{"location":"Population_Module/#workflow_8","text":"This functions collects motion stats, with the following steps: Collect structural volume data Collect WMH data Add stats in participants.tsv","title":"Workflow"},{"location":"Population_Module/#recommended-usage_8","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_8","text":"","title":"Interface definition"},{"location":"Population_Module/#create-biasfield","text":"","title":"Create Biasfield"},{"location":"Population_Module/#function_9","text":"function xASL_wrp_CreateBiasfield(x)","title":"Function"},{"location":"Population_Module/#description_9","text":"Create sequence-specific intensity biasfields.","title":"Description"},{"location":"Population_Module/#workflow_9","text":"This function creates a smooth biasfield as intensity map to normalize intensities between different sequences/scanner/sites within a single study. This is a simple pragmatic approach and is not validated, but is the best we can do. First acquires average additive & multiplicative factors for total GM, then does a smooth voxel-wise rescaling. This doesn't make an assumption whether site or sequence differences are additive or multiplicative, but rather fits them both. Global scaling it performed to GM CBF == 60 mL/100g/min NB : make sure that sequence resolution differences have been taken in account before creating these biasfields. PM : add normalization of between-subjects SD as well. PM : are there other things we can normalize?","title":"Workflow"},{"location":"Population_Module/#recommended-usage_9","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_9","text":"","title":"Interface definition"},{"location":"Population_Module/#create-population-templates","text":"","title":"Create Population Templates"},{"location":"Population_Module/#function_10","text":"function xASL_wrp_CreatePopulationTemplates(x, SaveUnmasked, bCompute4Sets, SpecificScantype, bSkipMissingScans, bRemoveOutliers, FunctionsAre)","title":"Function"},{"location":"Population_Module/#description_10","text":"ExploreASL Population module wrapper, creates population parametric images for each ScanType.","title":"Description"},{"location":"Population_Module/#workflow_10","text":"This function creates simple parametric images, a.k.a. templates, for different image/scan types, on population level, as well as for different sets (e.g. sites/scanners/cohorts, etc) if specified. By default these images are masked, and transformed into a single column, for quick computations with low memory usage. The default parametric images that are created are the mean, between-subject SD, and the maximal intensity projection (MIP). The latter can e.g. identify intra-vascular signal that is similar between different subjects. Other parametric maps can be decommented (now commented out for speed).","title":"Workflow"},{"location":"Population_Module/#recommended-usage_10","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_10","text":"","title":"Interface definition"},{"location":"Population_Module/#get-roi-statistics","text":"","title":"Get ROI statistics"},{"location":"Population_Module/#function_11","text":"function xASL_wrp_GetROIstatistics(x)","title":"Function"},{"location":"Population_Module/#description_11","text":"Compute statistics for each ROI.","title":"Description"},{"location":"Population_Module/#workflow_11","text":"This wrapper organizes the computation of statistics for different ROIs in a [1.5 1.5 1.5] mm MNI space: Load the atlas: xASL_stat_AtlasForStats Organize TSV output name: using x.S.output_ID Obtain the ROI statistics: xASL_stat_GetROIstatistics Print statistics in TSV files: xASL_stat_PrintStats","title":"Workflow"},{"location":"Population_Module/#recommended-usage_11","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_11","text":"","title":"Interface definition"},{"location":"Population_Module/#load-4d-mem-mapping-lesions-rois","text":"","title":"Load 4D Mem Mapping Lesions ROIs"},{"location":"Population_Module/#function_12","text":"function [x] = xASL_wrp_Load4DMemMapping_LesionsROIs(x)","title":"Function"},{"location":"Population_Module/#description_12","text":"Part of ExploreASL analysis module. Loads data & maps it to memory mapping file on disc, if not done before.","title":"Description"},{"location":"Population_Module/#workflow_12","text":"","title":"Workflow"},{"location":"Population_Module/#recommended-usage_12","text":"","title":"Recommended usage"},{"location":"Population_Module/#interface-definition_12","text":"","title":"Interface definition"},{"location":"Structural_Module/","text":"Submodules of the Structural Module Clean Up WMH SEGM Function function xASL_wrp_CleanUpWMH_SEGM(x) Description Submodule of ExploreASL Structural Module, that cleans up under- and over-segmentations of WMH SEGM . Workflow This submodule aims to clean up WMH under- or oversegmentations in a conservatively & robust way, i.e. erring on the side of caution. It uses input from the tissue class segmentation (e.g. CAT12 ) to repair the WMH segmentation (e.g. LST LPA/LGA or externally provided). Note that before running the tissue segmentation, the T1w was (conservatively) filled for WMH lesions. This function is not tested a lot, so mainly conservatively set up to improve the WMH volumetrics, rather than improve the registration. This submodule contains the following steps: Administration Correct pGM islands inside pWM : WMH can have an intensity similar to GM on the T1w , which erroneously classifies them as GM instead of WM(H) . The rule used here, is to define GM islands within the WM as clusters of pGM >0.05 for which 3 layers (dilations) have at least 95% pWM . For these islands, pGM is given 100% to pWM . 50% of pWM is given to pWMH (the pWMH/pNAWM distinction is made later in the pipeline, here still pWM=pWMH+pNAWM ). The reason is that not all low T1w intensities within the WM are WMH , we still expect some lacunes, perivascular (Virchow-Robin) spaces, which could be considered pNAWM rather than pWMH. Perform brainmasking & join masks Correct any WMH inside GM or CSF -> here we assume that CAT12 did a good segmentation job. If pGM is larger than pWM & larger than pWMH , we consider a voxel to be pGM and remove the pWMH. This effectively removes pWMH segmentation noise in the GM or CSF , it doesn't correct any significant misclassification of WMH in the GM or CSF . If the WMH segmentation does a significant misclassification (e.g. setting the pWMH inside GM or CSF to a probability higher than GM or CSF is by tissue segmentation), this is lesion filled after the WMH segmentation, on the T1w , hence the tissue segmentation won't have a chance to correct this. Fortunately, most oversegmentations in the GM/CSF have low pWMH , as WMH segmentation algorithms already perform a light tissue prior-based clean up themselves. Saving & file management Prepare visuals for visual QC & file management Recommended usage Interface definition FLAIR Biasfield Correction Function function xASL_wrp_FLAIR_BiasfieldCorrection(x) Description Submodule of ExploreASL Structural Module, that performs a biasfield correction on T1w & applies it on the FLAIR . Workflow This submodule performs a biasfield correction on T1w and applies it on FLAIR . This can be useful, when there are large lesions on the FLAIR that hamper capturing the biasfield nicely on the FLAIR itself. In such cases, the biasfield of the T1w might be easier to obtain and should be the same as the FLAIR , provided they are scanned in the same scan session (i.e.g same scanner, same coil). BE CAREFUL : this submodule assumes that the biasfields of the T1w and FLAIR are comparable, which is not the case when one of the two (or both) are already biasfield corrected. Recommended usage Interface definition Get Volumetrics Function function xASL_wrp_GetVolumetrics(x) Description Submodule of ExploreASL Structural Module, that obtains volumes from the tissue segmentations (& FLAIR WMH segmentations if they exist). Workflow This submodule computes the total volume for each of the tissue classes & stores them in a TSV file (per BIDS ). This is computed from the native space segmentation derivatives ( GM, WM & CSF ), from which the ICV & relative volumes can be calculated. This is performed for CAT12 or SPM12 (whichever was used), and optionally for a WMH_SEGM . Recommended usage Interface definition LST Segment FLAIR WMH Function function xASL_wrp_LST_Segment_FLAIR_WMH(x, rWMHPath, WMHsegmAlg) Description Submodule of ExploreASL Structural Module, that performs a biasfield correction on T1w & applies it on the FLAIR . Workflow This submodule runs the LST WMH segmentation, either with LGA or LPA . LPA is the default choice, it outperforms LGA a bit, depending on the image quality. These algorithms perform optimally with 3T images, with good contrast. Generally, LPA oversegments whereas LGA undersegments. The LPA oversegmentation is corrected in a later submodule. If a WMH_SEGM already existed, the LST is run quickly as dummy only, to be replaced by the original WMH_SEGM image. This function has the following parts: Reslice FLAIR (& WMH_SEGM , if exists) to T1w Define parameters for segmentation Run the segmentation Replace by already existing WMH_SEGM File management Remove NaNs from segmentations & fix image edges Recommended usage Interface definition LST T1w Lesion Filling WMH Function function xASL_wrp_LST_T1w_LesionFilling_WMH(x, rWMHPath) Description Submodule of ExploreASL Structural Module, that performs lesion filling on T1w based on WMH segmented on the FLAIR . Workflow This submodule runs the LST WMH -based T1w lesion filling, which should improve the registration & segmentation of the T1w by e.g. CAT12/SPM12 . The WMH can be either segmented in the previous submodule by LST LGA/LPGA or provided externally. Before lesion filling, we clean up the WMH segmentation, to make the lesion filling a bit more conservative. Sometimes the WMH segmentation oversegments inside the GM (as there can be hyperintensities on the FLAIR ) & we don't want to lesion-fill these on the T1w (which would turn their intensities in intensities similar to WM , leading to misclassifications by the T1w segmentation). Note that this is submodule only performs the lesion filling, and the clean up is also performed for the lesion filling only. A more thorough WMH clean up (for e.g. WMH volumetrics) is performed later in the Structural module, using also the results from the T1w segmentation. Note when changing the lesion filling here, LST lesion filling expects a probability map, doesnt work nicely with binary mask This function runs the following steps: File management Clean up the WMH segmentation used for lesion filling Run lesion filling Correction of too much/erronous lesion filling File management Recommended usage Interface definition Linear Reg FLAIR 2 T1w Function function xASL_wrp_LinearReg_FLAIR2T1w(x, bAutoACPC) Description Submodule of ExploreASL Structural Module, that aligns FLAIR with T1w . Workflow This submodule registers FLAIR linearly to the T1w . The same transformation is applied to all other related scans ( FLAIR -segmented lesions, WMH specifically or other lesions). This is required to enable the application of T1w derivatives (e.g. transformations to standard space, tissue segmentation) for FLAIR and vice versa (e.g. WMH lesion-filling). Recommended usage Interface definition Linear Reg T1w2MNI Function function xASL_wrp_LinearReg_T1w2MNI(x, bAutoACPC) Description Submodule of ExploreASL Structural Module, that aligns T1w with MNI . Workflow This submodule registers T1w linearly to the center of MNI space, a.k.a. ACPC alignment. The same transformation is applied to all other related scans ( ASL4D, M0, FLAIR, etc.). This facilitates MNI -based algorithms (e.g. SPM -based segmentation), and allows for visual QC with all images roughly in the same space. This submodule first clips high values that can bias the registration algorithm, then performs a center of mass-based ACPC alignment, and then several iterations of SPM coregistration. Assuming that this submodule is run at the start of ExploreASL, all NIfTI orientation matrices are restored before running the registration. Recommended usage Interface definition Resample 2 Standard Space Function function xASL_wrp_Resample2StandardSpace(x) Description Submodule of ExploreASL Structural Module, that resamples all structural images & derivatives. Workflow This submodule resamples all structural images & their derivatives to standard space. It uses the transformation fields that were obtained previously in the Structural module, concatenates all transformations into a single transformation (if not already done) & applies the transformation with a single interpolation (either trilinear for low quality or probability maps, or 2nd order B-spline). Finally, it computes the Jacobian determinants (i.e. the derivative of the transformation field) to obtain a map of the volumetric effects of the transformation. This Jacobian map is multiplied with the standard space resampled images, to restore their (local & global) total volume. The sum of volumes in native & standard space are compared as QC . This submodule is not only part of the structural module, but can be repeated when the transformation map is edited, e.g. after longitudinal registration or after creation of a group-wise template. Recommended usage Interface definition Segment T1w Function function [x] = xASL_wrp_SegmentT1w(x, SegmentSPM12) Description Submodule of ExploreASL Structural Module, that segments 3D T1 (or T2 ) scan. Workflow This submodule segments high resolution structural/anatomical scans into GM/WM/CSF /soft tissue/bone/air tissue classes. It will save GM/WM/CSF in native space, and the transformation from native to standard space. This transformation includes Geodesic Shooting/DARTEL for CAT12 . This submodule contains the following steps: Administration Extra segmentation options by Jan Petr Segmentation using CAT12 If CAT12 fails, it will be repeated with higher contrast, higher strength affine preprocessing & less biasfield regularization If CAT12 fails twice, it will be skipped & SPM12 will be run Segmentation using SPM12 File management CAT12 File management lesions Resample lesions to standard space For the lesion masking. MORE EXPLANATION NEEDED BY JAN Manage flowfields Smooth combination non-linear flowfield outside the lesion & uniform flowfield within the lesion File management Recommended usage Interface definition Visual QC Structural Function function xASL_wrp_VisualQC_Structural(x) Description Submodule of ExploreASL Structural Module, that performs several visualizations for . Workflow This submodule performs several visualizations for visual & quantitative QC . After initial admin It starts with the SPM UP parameters (courtesy of Cyril Pernet, his SPM UP scripts were made more robust & accurate by Jan & Henk, & are implemented here for T1w (& optionally FLAIR ). Then it performs a collection of visualizations Also repeated specifically for lesions & manually provided ROIs Finally, this contains a report of all missing raw & derivative files, in native & standard space, printing the NIfTI orientation matrix content before ( hdr.mat0 ) & after registrations ( hdr.mat ). The determinant of these matrices should be the same, otherwise LeftRight has flipped. This should also be the same across a group scanned at the same scanner. Then various other QC functions are called & all are summarized in a PDF report. Recommended usage Interface definition","title":"Module Structural"},{"location":"Structural_Module/#submodules-of-the-structural-module","text":"","title":"Submodules of the Structural Module"},{"location":"Structural_Module/#clean-up-wmh-segm","text":"","title":"Clean Up WMH SEGM"},{"location":"Structural_Module/#function","text":"function xASL_wrp_CleanUpWMH_SEGM(x)","title":"Function"},{"location":"Structural_Module/#description","text":"Submodule of ExploreASL Structural Module, that cleans up under- and over-segmentations of WMH SEGM .","title":"Description"},{"location":"Structural_Module/#workflow","text":"This submodule aims to clean up WMH under- or oversegmentations in a conservatively & robust way, i.e. erring on the side of caution. It uses input from the tissue class segmentation (e.g. CAT12 ) to repair the WMH segmentation (e.g. LST LPA/LGA or externally provided). Note that before running the tissue segmentation, the T1w was (conservatively) filled for WMH lesions. This function is not tested a lot, so mainly conservatively set up to improve the WMH volumetrics, rather than improve the registration. This submodule contains the following steps: Administration Correct pGM islands inside pWM : WMH can have an intensity similar to GM on the T1w , which erroneously classifies them as GM instead of WM(H) . The rule used here, is to define GM islands within the WM as clusters of pGM >0.05 for which 3 layers (dilations) have at least 95% pWM . For these islands, pGM is given 100% to pWM . 50% of pWM is given to pWMH (the pWMH/pNAWM distinction is made later in the pipeline, here still pWM=pWMH+pNAWM ). The reason is that not all low T1w intensities within the WM are WMH , we still expect some lacunes, perivascular (Virchow-Robin) spaces, which could be considered pNAWM rather than pWMH. Perform brainmasking & join masks Correct any WMH inside GM or CSF -> here we assume that CAT12 did a good segmentation job. If pGM is larger than pWM & larger than pWMH , we consider a voxel to be pGM and remove the pWMH. This effectively removes pWMH segmentation noise in the GM or CSF , it doesn't correct any significant misclassification of WMH in the GM or CSF . If the WMH segmentation does a significant misclassification (e.g. setting the pWMH inside GM or CSF to a probability higher than GM or CSF is by tissue segmentation), this is lesion filled after the WMH segmentation, on the T1w , hence the tissue segmentation won't have a chance to correct this. Fortunately, most oversegmentations in the GM/CSF have low pWMH , as WMH segmentation algorithms already perform a light tissue prior-based clean up themselves. Saving & file management Prepare visuals for visual QC & file management","title":"Workflow"},{"location":"Structural_Module/#recommended-usage","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition","text":"","title":"Interface definition"},{"location":"Structural_Module/#flair-biasfield-correction","text":"","title":"FLAIR Biasfield Correction"},{"location":"Structural_Module/#function_1","text":"function xASL_wrp_FLAIR_BiasfieldCorrection(x)","title":"Function"},{"location":"Structural_Module/#description_1","text":"Submodule of ExploreASL Structural Module, that performs a biasfield correction on T1w & applies it on the FLAIR .","title":"Description"},{"location":"Structural_Module/#workflow_1","text":"This submodule performs a biasfield correction on T1w and applies it on FLAIR . This can be useful, when there are large lesions on the FLAIR that hamper capturing the biasfield nicely on the FLAIR itself. In such cases, the biasfield of the T1w might be easier to obtain and should be the same as the FLAIR , provided they are scanned in the same scan session (i.e.g same scanner, same coil). BE CAREFUL : this submodule assumes that the biasfields of the T1w and FLAIR are comparable, which is not the case when one of the two (or both) are already biasfield corrected.","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_1","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_1","text":"","title":"Interface definition"},{"location":"Structural_Module/#get-volumetrics","text":"","title":"Get Volumetrics"},{"location":"Structural_Module/#function_2","text":"function xASL_wrp_GetVolumetrics(x)","title":"Function"},{"location":"Structural_Module/#description_2","text":"Submodule of ExploreASL Structural Module, that obtains volumes from the tissue segmentations (& FLAIR WMH segmentations if they exist).","title":"Description"},{"location":"Structural_Module/#workflow_2","text":"This submodule computes the total volume for each of the tissue classes & stores them in a TSV file (per BIDS ). This is computed from the native space segmentation derivatives ( GM, WM & CSF ), from which the ICV & relative volumes can be calculated. This is performed for CAT12 or SPM12 (whichever was used), and optionally for a WMH_SEGM .","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_2","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_2","text":"","title":"Interface definition"},{"location":"Structural_Module/#lst-segment-flair-wmh","text":"","title":"LST Segment FLAIR WMH"},{"location":"Structural_Module/#function_3","text":"function xASL_wrp_LST_Segment_FLAIR_WMH(x, rWMHPath, WMHsegmAlg)","title":"Function"},{"location":"Structural_Module/#description_3","text":"Submodule of ExploreASL Structural Module, that performs a biasfield correction on T1w & applies it on the FLAIR .","title":"Description"},{"location":"Structural_Module/#workflow_3","text":"This submodule runs the LST WMH segmentation, either with LGA or LPA . LPA is the default choice, it outperforms LGA a bit, depending on the image quality. These algorithms perform optimally with 3T images, with good contrast. Generally, LPA oversegments whereas LGA undersegments. The LPA oversegmentation is corrected in a later submodule. If a WMH_SEGM already existed, the LST is run quickly as dummy only, to be replaced by the original WMH_SEGM image. This function has the following parts: Reslice FLAIR (& WMH_SEGM , if exists) to T1w Define parameters for segmentation Run the segmentation Replace by already existing WMH_SEGM File management Remove NaNs from segmentations & fix image edges","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_3","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_3","text":"","title":"Interface definition"},{"location":"Structural_Module/#lst-t1w-lesion-filling-wmh","text":"","title":"LST T1w Lesion Filling WMH"},{"location":"Structural_Module/#function_4","text":"function xASL_wrp_LST_T1w_LesionFilling_WMH(x, rWMHPath)","title":"Function"},{"location":"Structural_Module/#description_4","text":"Submodule of ExploreASL Structural Module, that performs lesion filling on T1w based on WMH segmented on the FLAIR .","title":"Description"},{"location":"Structural_Module/#workflow_4","text":"This submodule runs the LST WMH -based T1w lesion filling, which should improve the registration & segmentation of the T1w by e.g. CAT12/SPM12 . The WMH can be either segmented in the previous submodule by LST LGA/LPGA or provided externally. Before lesion filling, we clean up the WMH segmentation, to make the lesion filling a bit more conservative. Sometimes the WMH segmentation oversegments inside the GM (as there can be hyperintensities on the FLAIR ) & we don't want to lesion-fill these on the T1w (which would turn their intensities in intensities similar to WM , leading to misclassifications by the T1w segmentation). Note that this is submodule only performs the lesion filling, and the clean up is also performed for the lesion filling only. A more thorough WMH clean up (for e.g. WMH volumetrics) is performed later in the Structural module, using also the results from the T1w segmentation. Note when changing the lesion filling here, LST lesion filling expects a probability map, doesnt work nicely with binary mask This function runs the following steps: File management Clean up the WMH segmentation used for lesion filling Run lesion filling Correction of too much/erronous lesion filling File management","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_4","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_4","text":"","title":"Interface definition"},{"location":"Structural_Module/#linear-reg-flair-2-t1w","text":"","title":"Linear Reg FLAIR 2 T1w"},{"location":"Structural_Module/#function_5","text":"function xASL_wrp_LinearReg_FLAIR2T1w(x, bAutoACPC)","title":"Function"},{"location":"Structural_Module/#description_5","text":"Submodule of ExploreASL Structural Module, that aligns FLAIR with T1w .","title":"Description"},{"location":"Structural_Module/#workflow_5","text":"This submodule registers FLAIR linearly to the T1w . The same transformation is applied to all other related scans ( FLAIR -segmented lesions, WMH specifically or other lesions). This is required to enable the application of T1w derivatives (e.g. transformations to standard space, tissue segmentation) for FLAIR and vice versa (e.g. WMH lesion-filling).","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_5","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_5","text":"","title":"Interface definition"},{"location":"Structural_Module/#linear-reg-t1w2mni","text":"","title":"Linear Reg T1w2MNI"},{"location":"Structural_Module/#function_6","text":"function xASL_wrp_LinearReg_T1w2MNI(x, bAutoACPC)","title":"Function"},{"location":"Structural_Module/#description_6","text":"Submodule of ExploreASL Structural Module, that aligns T1w with MNI .","title":"Description"},{"location":"Structural_Module/#workflow_6","text":"This submodule registers T1w linearly to the center of MNI space, a.k.a. ACPC alignment. The same transformation is applied to all other related scans ( ASL4D, M0, FLAIR, etc.). This facilitates MNI -based algorithms (e.g. SPM -based segmentation), and allows for visual QC with all images roughly in the same space. This submodule first clips high values that can bias the registration algorithm, then performs a center of mass-based ACPC alignment, and then several iterations of SPM coregistration. Assuming that this submodule is run at the start of ExploreASL, all NIfTI orientation matrices are restored before running the registration.","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_6","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_6","text":"","title":"Interface definition"},{"location":"Structural_Module/#resample-2-standard-space","text":"","title":"Resample 2 Standard Space"},{"location":"Structural_Module/#function_7","text":"function xASL_wrp_Resample2StandardSpace(x)","title":"Function"},{"location":"Structural_Module/#description_7","text":"Submodule of ExploreASL Structural Module, that resamples all structural images & derivatives.","title":"Description"},{"location":"Structural_Module/#workflow_7","text":"This submodule resamples all structural images & their derivatives to standard space. It uses the transformation fields that were obtained previously in the Structural module, concatenates all transformations into a single transformation (if not already done) & applies the transformation with a single interpolation (either trilinear for low quality or probability maps, or 2nd order B-spline). Finally, it computes the Jacobian determinants (i.e. the derivative of the transformation field) to obtain a map of the volumetric effects of the transformation. This Jacobian map is multiplied with the standard space resampled images, to restore their (local & global) total volume. The sum of volumes in native & standard space are compared as QC . This submodule is not only part of the structural module, but can be repeated when the transformation map is edited, e.g. after longitudinal registration or after creation of a group-wise template.","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_7","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_7","text":"","title":"Interface definition"},{"location":"Structural_Module/#segment-t1w","text":"","title":"Segment T1w"},{"location":"Structural_Module/#function_8","text":"function [x] = xASL_wrp_SegmentT1w(x, SegmentSPM12)","title":"Function"},{"location":"Structural_Module/#description_8","text":"Submodule of ExploreASL Structural Module, that segments 3D T1 (or T2 ) scan.","title":"Description"},{"location":"Structural_Module/#workflow_8","text":"This submodule segments high resolution structural/anatomical scans into GM/WM/CSF /soft tissue/bone/air tissue classes. It will save GM/WM/CSF in native space, and the transformation from native to standard space. This transformation includes Geodesic Shooting/DARTEL for CAT12 . This submodule contains the following steps: Administration Extra segmentation options by Jan Petr Segmentation using CAT12 If CAT12 fails, it will be repeated with higher contrast, higher strength affine preprocessing & less biasfield regularization If CAT12 fails twice, it will be skipped & SPM12 will be run Segmentation using SPM12 File management CAT12 File management lesions Resample lesions to standard space For the lesion masking. MORE EXPLANATION NEEDED BY JAN Manage flowfields Smooth combination non-linear flowfield outside the lesion & uniform flowfield within the lesion File management","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_8","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_8","text":"","title":"Interface definition"},{"location":"Structural_Module/#visual-qc-structural","text":"","title":"Visual QC Structural"},{"location":"Structural_Module/#function_9","text":"function xASL_wrp_VisualQC_Structural(x)","title":"Function"},{"location":"Structural_Module/#description_9","text":"Submodule of ExploreASL Structural Module, that performs several visualizations for .","title":"Description"},{"location":"Structural_Module/#workflow_9","text":"This submodule performs several visualizations for visual & quantitative QC . After initial admin It starts with the SPM UP parameters (courtesy of Cyril Pernet, his SPM UP scripts were made more robust & accurate by Jan & Henk, & are implemented here for T1w (& optionally FLAIR ). Then it performs a collection of visualizations Also repeated specifically for lesions & manually provided ROIs Finally, this contains a report of all missing raw & derivative files, in native & standard space, printing the NIfTI orientation matrix content before ( hdr.mat0 ) & after registrations ( hdr.mat ). The determinant of these matrices should be the same, otherwise LeftRight has flipped. This should also be the same across a group scanned at the same scanner. Then various other QC functions are called & all are summarized in a PDF report.","title":"Workflow"},{"location":"Structural_Module/#recommended-usage_9","text":"","title":"Recommended usage"},{"location":"Structural_Module/#interface-definition_9","text":"","title":"Interface definition"}]}